{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p> \ud83d\udcd6 Object -oriented programming course YouTube - OOP: </p> <p>  by Runtimevic -- V\u00edctor Dur\u00e1n Mu\u00f1oz. </p>"},{"location":"#what-is-oop","title":"What is Oop?","text":"<ul> <li> <p>It is a paradigm that makes use of objects for software construction.</p> <p>. What is a paradigm?</p> <ul> <li>It has different interpretations, it can be a model, example o pattern.</li> <li>Is a form o o style to program.</li> <li>It seeks to capture reality towards the code.</li> </ul> </li> </ul>"},{"location":"#how-to-think-about-objects","title":"How to think about objects?","text":"<ul> <li>To focus on Something of reality.</li> <li>Details its attributes, (properties)</li> <li>Details its behaviors (METHODS)</li> </ul> <pre><code>\ud83d\udcf1 Example: (Mobile-Smartphone Telephone)\n\n. What attributes (Properties) We recognize? \n    - color.\n    - brand.\n. What can be done? (METHODS)\n    - Make calls.\n    - Internet. \n</code></pre> <pre><code>\ud83d\ude97 Example: (Coach)\n\n. What attributes (Properties) We recognize? \n    - color.\n    - brand.\n. What can be done? (Metodos)\n    - drive.\n    - curb. \n    - speed up.\n</code></pre>"},{"location":"#links","title":"Links:","text":"<ul> <li> <p>\ud83d\udd17 Codesys admit OOP</p> </li> <li> <p>\ud83d\udd17 Beckhoff TwinCAT 3 admit OOP</p> </li> <li> <p>\ud83d\udd17 Why Object Oriented PLC Programming is Essential for Industrial Automation</p> </li> </ul>"},{"location":"#link-to-video-youtube-001","title":"link to Video Youtube 001:","text":"<ul> <li>\ud83d\udd17 001 - OOP IEC 61131-3 PLC -- Introduction to the SSG documentation page, repository...</li> </ul>"},{"location":"Extended_Structured_Text/","title":"Extended Structured Text","text":""},{"location":"Extended_Structured_Text/#exst-extended-structured-text","title":"EXST - Extended Structured Text:","text":"<ul> <li>\ud83d\udd17 Structured Text and Extended Structured Text (ExST), infosys.beckhoff.com</li> </ul>"},{"location":"Libraries/","title":"Libraries","text":""},{"location":"Libraries/#libraries","title":"Libraries:","text":"<p>When you develop a project, what do you do when you want to reuse the same program for another project?Probably the most common is to copy and paste.This is fine for small projects, but as the application grows, libraries allow us to administer the functions and functions blocks that we have created.</p> <p>Through the use of libraries, we can administer the software that we have created in multiple projects.First, it is a fact that different devices will have different functions, but still, there will always be common parts.In the world of software development, that concept of library management is quite common.</p>"},{"location":"Libraries/#what-are-the-advantages-of-using-the-library","title":"What are the advantages of using the library?","text":"<ul> <li>The software is modular, for example, if I have cylinder software, I can use the cylinder library, and if I have registration software, I can use the registration library.</li> <li>Each library is tested independently.</li> </ul>"},{"location":"Libraries/#links-libraries","title":"Links Libraries:","text":"<ul> <li>\ud83d\udd17 soup01.com,beckhofftwincat3-library-management</li> <li>\ud83d\udd17 PLC programming using TwinCAT 3 - Libraries (Part 11/18)</li> <li>\ud83d\udd17 help.codesys.com,_cds_obj_library_manager/</li> <li>\ud83d\udd17 help.codesys.com,_cds_library_development_information/</li> <li>\ud83d\udd17 help.codesys.com,_tm_test_action_libraries_addlibrary</li> <li>\ud83d\udd17 CODESYS Webinar Library Management Basics</li> <li>\ud83d\udd17 CoDeSys - How to add libraries and more with Machine Control Studio.</li> </ul>"},{"location":"Types%20of%20Design%20for%20PLC%20programming/","title":"Types of Design for PLC programming","text":""},{"location":"Types%20of%20Design%20for%20PLC%20programming/#types-of-design-for-plc-programming","title":"Types of design for PLC programming:","text":"<p>Development engineering for OOP programming - Component design, unit, device, object...     - Objects are the basic object -oriented programming units.     - A component provides services, while an object provides operations and methods.A component can be understood by all, while an object can only be understood by developers.     - The units are the smallest code groups that can be maintained and executed independently - Design for unit tests. - UML design.</p> <p>Units: (Example of units): - I_InputDigital(p_On, p_Off) - I_OutputDigital(M_ON, M_OFF) - I_InputAnalog - I_OutputAnalog - I_Run:(M_Start, M_Stop)</p> <p>-FBTimer -FCAnalogSensor -FBGenericUnit</p> <p>!!! points that can be included in the course!!!: - Objects composition (Composition of objects)</p> <ul> <li>Basic of Structured Text programming Language</li> <li>UDT (structures)</li> <li>Modular Design</li> <li> <p>Polymorphism</p> </li> <li> <p>Advanced State Pattern</p> </li> <li>Wrappers and Features</li> <li>Layered Design</li> <li> <p>Final Project covering a real-world problem to be solved using OOP</p> </li> <li> <p>Structured text (ST), Extended structured text (ExST)</p> </li> </ul>"},{"location":"Types%20of%20Paradigms/","title":"Types of paradigms","text":""},{"location":"Types%20of%20Paradigms/#types-of-paradigms","title":"Types of Paradigms:","text":"<ul> <li>Imperative -- (**Instructions to follow ** To solve a problem).</li> <li>Declarative -- (Se ** focuses on the problem ** to solve).</li> <li>Structured -- (The solution to a problem follows ** a sequence from start to finish **).</li> <li> <p>Functional -- (Divide the problem into various solutions that will be executed by the ** declared functions **). Procedural programming or procedure programming is a programming paradigm.Many times it is applicable both in low -level programming languages and in high -level languages.In the event that this technique is applied in high -level languages, it will receive the name of functional programming.</p> <ul> <li>They are called separate routines from the main program</li> <li>Most global data -&gt; No protection.</li> <li>The procedures can usually be independent -&gt; bad reuse of the code.</li> </ul> </li> </ul> <p></p> <ul> <li> Object -oriented  -- Build ** objects based on objects**. <pre><code>wikipedia:\nObject -oriented programming is a programming paradigm\nBased on the concept of \"objects\", which can contain data and code.\nThe data is in the form of fields and the code is in the form of procedures.\n</code></pre></li> </ul> <p></p>"},{"location":"Types%20of%20Paradigms/#advantages-of-programming-with-oop","title":"ADVANTAGES OF PROGRAMMING with OOP:","text":"<ul> <li>routines and data are combined in an object -&gt; encapsulation.</li> <li>Methods/Properties -&gt; Interface defined for calls and data access.</li> </ul>"},{"location":"Types%20of%20Paradigms/#link-to-the-youtube-video-002","title":"Link to the Youtube Video 002:","text":"<ul> <li>\ud83d\udd17 002 - OOP IEC 61131-3 PLC -- Clase y Objeto</li> <li>\ud83d\udd17 003 - OOP IEC 61131-3 PLC -- Clase y Objeto</li> </ul>"},{"location":"links/","title":"Links","text":""},{"location":"links/#links-of-oop","title":"Links of OOP:","text":""},{"location":"links/#mention-to-the-sources-links-used-to-carry-out-this-documentation","title":"Mention to the sources links used to carry out this documentation:","text":""},{"location":"requeriments/","title":"Requeriments","text":"<p> \ud83d\udc68\u200d\ud83c\udf93 Requirements \ud83d\udc69\u200d\ud83c\udf93 : </p> <p></p> <p>The necessary requirements to follow this course would be installed the following softwares:</p> <ul> <li>\ud83d\udd17 Beckhoff TwinCAT 3 XAE or the ide of \ud83d\udd17 Codesys.</li> <li>Have a user account in \ud83d\udd17 GitHub.</li> <li> <p>Know the minimum of git or rely on visual tools such as:</p> <ul> <li>\ud83d\udd17 GitHub Desktop.</li> <li>\ud83d\udd17 sourcetree</li> <li>\ud83d\udd17 tortoiseGit, etc...</li> <li>It would be good to have some previous knowledge of OOP theory, even if they are in other programming languages since they will be extrapolated to the approach of this OOP course IEC61131-3 for PLCs.</li> </ul> </li> </ul>"},{"location":"requeriments/#steps-to-start","title":"STEPS TO START:","text":"<ul> <li> <p>Clone the repository of \ud83d\udd17GitHub:</p> <p>$ git clone https://github.com/runtimevic/OOP-IEC61131-3--Curso-Youtube.git</p> <p>or use for example github desktop to clone Github's repository...</p> </li> <li> <p>We will find the following folders:</p> <ul> <li>\ud83d\udd17 TC3_OOP: Within this folder is the Twincat3 project, with everything that is explained in the YouTube videos...</li> <li>\ud83d\udd17 Ficheros_PLCOpen_XML: Within this folder we will find the exported files in Plcopen XML format so that they can be imported on Twincat3 or in codesys of everything explained on YouTube, since being the standardized Plcopen format can be exported/imported in all brands ofPlcs that follow the standard Plcopen ..., but it is advisable to try to do what is explained from scratch to practice and assume the concepts explained ...</li> <li>The creation of this SSG website is also housed, (Static sites generator) which will be modified as we advance in this course of OOP IC-61131-3 PLC...</li> </ul> </li> </ul>"},{"location":"requeriments/#link-to-the-youtube-video-001","title":"Link to the Youtube Video 001:","text":"<ul> <li>\ud83d\udd17 001 - OOP IEC 61131-3 PLC -- Introduction to the SSG documentation page, repository...</li> </ul>"},{"location":"Clases%20y%20Objetos/Inheritance/Inheritance%20Function%20Block/","title":"Inheritance Function Block","text":""},{"location":"Clases%20y%20Objetos/Inheritance/Inheritance%20Function%20Block/#inheritance-function-block","title":"Inheritance function block:","text":"<p>The functions blocks are an excellent medium to maintain the sections of the program separated from each other.This improves the structure of the software and significantly simplifies reuse.Previously, expanding the functionality of an existing block of functions was always a delicate task.This meant modifying the code or programming a new block of functions around the existing block (that is, the existing functions block was effectively embedded within a new block of functions).In the last case, it was necessary to create all the input variables again and assign them to the input variables for the existing functions block.The same was required, in the opposite, for the output variables.</p> <p>Twincat 3 and Codesys (IEC61131-3) introduce the concept of inheritance.Inheritance is one of the fundamental principles of object -oriented programming.The inheritance implies deriving a new block of functions from an existing block of functions.Next, you can expand the new block.To the extent allowed by the access specifiers of the main functions block, the new block of functions inherits all the properties and methods of the main functions block.Each block of functions can have any number of blocks of secondary functions, but only a block of main functions.The derivation of a block of functions is produced in the new statement of the Functions Block.The name of the new block of functions is followed by the keyword extended followed by the name of the main functions block.For example: <pre><code>FUNCTION_BLOCK PUBLIC FB_NewEngine EXTENDS FB_Engine\n</code></pre> The new block of derived functions ( FB_NewEngine ) He has all the properties and methods of his father ( FB_Engine ). However, the methods and properties are only inherited when the access specifier allows it.</p> <p>The secondary functions block also inherits all variables local, VAR_INPUT , VAR_OUTPUT y VAR_IN_OUT of the main functions block.This behavior cannot be modified by access specifiers.</p> <p>If the methods or properties of the main functions block have been declared as a protect, the secondary functions block (FB_Newengine) will be able to access them, but not from outside FB_NewEngine .</p> <p>The inheritance applies only to the Pou of type function_block.</p>"},{"location":"Clases%20y%20Objetos/Inheritance/Inheritance%20Function%20Block/#access-specifiers","title":"Access specifiers:","text":"<p>Function_Block, Function or Program statements may include an access specifier.This restricts access and, where appropriate, the ability to inherit.</p> <ul> <li>PUBLIC:</li> </ul> <p>Anyone can call or create an instance of the Pou.In addition, if the POU is a function_block, it can be used for inheritance.Restrictions are not applied.</p> <ul> <li>INTERN:</li> </ul> <p>The Pou can only be used within its own name space.This allows the POU to be available only within a certain library, for example.</p> <ul> <li>FINAL:</li> </ul> <p>The function_block cannot serve as a main block of functions.The methods and properties of this Pou cannot be inherited.Final is only allowed for pou of the type function_block.</p> <p>The default configuration where no access specifier is defined is public.Private and Protected Access Specifiers are not allowed in Pou's statements.</p> <p>If you plan to use the inheritance, the declaration of the Functions Block will have the following structure:</p> <pre><code>FUNCTION_BLOCK &lt;Access specifier&gt; &lt;Name&gt; EXTENDS &lt;Name basic function block&gt;\n</code></pre>"},{"location":"Clases%20y%20Objetos/Inheritance/Inheritance%20Function%20Block/#overwhelming-methods","title":"Overwhelming methods:","text":"<p>The new function_block FB_Newengine, which is derived from FB_ENGINE, may contain additional properties and methods.For example, we can add Gear property.This property can be used to consult and change the current march.It is necessary to configure getters and setters for this property.</p> <p>However, we must also ensure that the parameter NGear of the Start () method is passed to this property.Because the FB_Engine main functions block has no access to this new property, a new method must be created exactly the same parameters in FB_Newengine.We copy the existing code to the new method and add new code so that the NGEAR parameter passes to Gear Property.</p> <p><pre><code>METHOD PUBLIC Start\nVAR_INPUT\n  nGear : INT := 2;\n  fVelocity : LREAL := 8.0;\nEND_VAR \n\nIF (fVelocity &lt; MaxVelocity) THEN\n  velocityInternal := fVelocity;\nELSE\n  velocityInternal := MaxVelocity;\nEND_IF\nGear := nGear; // new\n</code></pre> Line 12 copy the NGEAR parameter to the Gear Property.</p> <p>When a method or property that is already present in the main functions block is redefined within the secondary functions block, this is called overwhelming.The FB_Newengine Function Block overwrites the Start () method.</p> <p>Therefore, FB_Newengine has the new gear property and overwrites the Start () method.</p> <p></p> <p><pre><code>fbNewEngine.Start(1, 7.5);\n</code></pre> Call the Start () method in FB_Newengine, since this method has been redefined (overwhelming) in FB_Newengine.</p> <p>While:</p> <p><pre><code>fbNewEngine.Stop();\n</code></pre> Call the stop () method from FB_Engine.The Stop () method has been inherited by FB_Newengine of FB_ENGINE.</p>"},{"location":"Clases%20y%20Objetos/Inheritance/Inheritance%20Function%20Block/#inheritance-links-function-block","title":"Inheritance Links Function Block:","text":"<ul> <li> <p>\ud83d\udd17 stefanhenneken.net,iec-61131-3-methods-properties-and-inheritance</p> </li> <li> <p>\ud83d\udd17 Simple Codesys OOP - Inheritance</p> </li> <li> <p>\ud83d\udd17 TC11.Beckhoff TwinCAT3 Function Block Extend.JP</p> </li> </ul>"},{"location":"Clases%20y%20Objetos/Inheritance/Inheritance%20Function%20Block/#link-to-the-youtube-video-007","title":"Link to the Youtube Video 007:","text":"<ul> <li>\ud83d\udd17 007 - OOP IEC 61131-3 PLC -- Inheritance FB</li> </ul>"},{"location":"Clases%20y%20Objetos/Inheritance/Inheritance%20Interface/","title":"Inheritance Interface","text":""},{"location":"Clases%20y%20Objetos/Inheritance/Inheritance%20Structure/","title":"Inheritance Structure","text":""}]}